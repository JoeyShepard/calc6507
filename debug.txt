Line numbers
============
1: Zero page assignments
5: include macros.asm
123: include todo.asm
217: include const.asm
491: include emu.asm
552: GLOBAL BYTE null
560: GLOBAL WORD dummy
562: GLOBAL WORD ret_val
566: GLOBAL WORD ret_address
570: GLOBAL WORD screen_ptr
574: GLOBAL WORD dict_ptr
576: GLOBAL WORD new_dict_ptr
579: GLOBAL WORD dict_save
581: GLOBAL WORD exec_ptr
584: GLOBAL WORD obj_address
588: GLOBAL WORD math_ptr1
590: GLOBAL WORD math_ptr2
618: include globals.asm
634: GLOBAL BYTE font_inverted
638: GLOBAL BYTE stack_count
640: GLOBAL BYTE mode
644: GLOBAL WORD test_count
664: GLOBAL BYTE stack_X
670: GLOBAL BYTE math_lo
672: GLOBAL BYTE math_hi
674: GLOBAL BYTE math_a
676: GLOBAL BYTE math_b
678: GLOBAL BYTE math_c
681: GLOBAL BYTE math_d
684: GLOBAL BYTE math_signs
686: GLOBAL BYTE math_sticky
688: GLOBAL BYTE math_max
691: GLOBAL BYTE math_fill
696: GLOBAL BYTE shift_counter
698: GLOBAL BYTE CORDIC_sign
700: GLOBAL BYTE CORDIC_halve
702: GLOBAL BYTE CORDIC_loop_inner
704: GLOBAL BYTE CORDIC_loop_outer
706: GLOBAL BYTE CORDIC_shift_count
708: GLOBAL BYTE CORDIC_sign_temp
710: GLOBAL BYTE CORDIC_end_sign
712: GLOBAL WORD CORDIC_comparator
722: GLOBAL BYTE aux_stack_ptr
724: GLOBAL BYTE aux_stack_count
726: GLOBAL BYTE aux_word_counter
743: include debug.asm
747: FUNC DebugText
       ARGS: STRING msg
       2 bytes used
761: FUNC halt_test
       ARGS: WORD test
       2 bytes used
777: FUNC halt_no_test
795: include tests.asm
805: FUNC InputTest
       ARGS: STRING input, STRING output, BYTE output_index, BYTE calculated_index, BYTE value
       7 bytes used
959: FUNC NewToR
       ARGS: WORD Rx
       2 bytes used
973: FUNC CopyNew
       ARGS: STRING num1
       2 bytes used
996: FUNC DebugRans
1031: FUNC DebugBuff
1068: FUNC RansToBuff
1080: FUNC CompareRans
1098: FUNC TestFail
       ARGS: STRING ans
       2 bytes used
1159: FUNC TestsPassed
1194: FUNC AddTest
       ARGS: STRING num1, STRING num2, STRING ans
       6 bytes used
1260: FUNC MultTest
       ARGS: STRING num1, STRING num2, STRING ans
       6 bytes used
1326: FUNC DivTest
       ARGS: STRING num1, STRING num2, STRING ans
       6 bytes used
1393: FUNC tests
1457: include file_tests.asm
1463: GLOBAL WORD counter1
1464: GLOBAL WORD counter2
1466: GLOBAL WORD failed1
1467: GLOBAL WORD failed2
1469: FUNC line_num
1491: FUNC inc_line
1509: FUNC read_file_line
1534: FUNC FileInputTest
       VARS: BYTE value
       1 byte used
1644: FUNC read2
1670: FUNC file_tests
1958: include stats.asm
1962: FUNC stats
2001: include font_5x8.asm
2200: include font_custom.asm
2233: include emu6507.asm
2245: FUNC setup
2313: FUNC GfxSetup
2322: FUNC ReadKey
2328: FUNC LCD_clrscr
       VARS: BYTE counter
       1 byte used
2350: FUNC LCD_char
       ARGS: BYTE c_out, WORD pixel_ptr, BYTE pixel_index, BYTE pixel, BYTE lc1, BYTE lc2
       7 bytes used
2469: FUNC LCD_print
       ARGS: STRING source, BYTE index, BYTE arg
       4 bytes used
2497: include system.asm
2500: FUNC MemCopy
       ARGS: WORD source, WORD dest, BYTE count
       5 bytes used
2519: include math.asm
2536: FUNC BCD_Reverse
       ARGS: WORD source, BYTE count
       3 bytes used
2557: FUNC BCD_RevExp
2570: FUNC BCD_RevSig
2593: FUNC ZeroReg
2606: FUNC MaxReg
2633: FUNC IncRansExp
2648: FUNC SwapR0R1
2668: FUNC CopyRegs
2686: FUNC TosR0R1
2712: FUNC RansTos
2735: FUNC HalfShift
2756: FUNC HalfShiftForward
2775: FUNC HalfShiftBackward
2794: FUNC HalfShiftWide
2819: FUNC HalfShiftWideForward
2843: FUNC ShiftR0
2930: FUNC NormRans
3020: FUNC BCD_Round
3058: FUNC BCD_Unpack
3079: FUNC BCD_Pack
3121: FUNC BCD_Exp_diff
3133: FUNC BCD_StickyRound
3178: FUNC BCD_Add
3356: FUNC BCD_Mult
3497: FUNC BCD_Div
3637: include cordic.asm
3758: FUNC BCD_CORDIC
4025: FUNC CORDIC_ShiftR0
4034: FUNC CORDIC_MarkSign
4051: FUNC CORDIC_Trig
4209: FUNC CORDIC_Atrig1
4221: FUNC CORDIC_Atan
4382: FUNC CORDIC_AsinAcos
4538: FUNC CORDIC_Pack
4590: FUNC CORDIC_Push
4708: include output.asm
4712: FUNC DigitHigh
       ARGS: BYTE digit
       1 byte used
4732: FUNC DigitLow
       ARGS: BYTE digit
       1 byte used
4749: FUNC DrawFloat
       ARGS: WORD source, BYTE index, BYTE arg, BYTE sign, WORD buff
       7 bytes used
4871: FUNC HexHigh
       ARGS: BYTE digit, BYTE arg
       2 bytes used
4900: FUNC HexLow
       ARGS: BYTE digit, BYTE arg
       2 bytes used
4926: FUNC DrawHex
       ARGS: WORD source, BYTE arg
       3 bytes used
4966: FUNC DrawString
       ARGS: WORD source, BYTE arg, BYTE index
       4 bytes used
5003: FUNC DrawStack
       VARS: BYTE character, BYTE counter, WORD address
       4 bytes used
5164: include error.asm
5215: FUNC ErrorMsg
       VARS: WORD msg
       2 bytes used
5279: include aux_stack.asm
5284: FUNC AuxPushShort
5308: FUNC AuxPopShort
5331: include forth.asm
5334: FUNC InitForth
5360: FUNC ReadLine
       VARS: BYTE cursor, BYTE cursor_timer, BYTE arg, BYTE index, BYTE str_index
       5 bytes used
5610: FUNC LineWord
5666: FUNC FindWord
5733: FUNC CheckData
       VARS: BYTE input_mode, BYTE y_buff, BYTE index, BYTE which_digit, BYTE negative, BYTE exp_negative, BYTE exp_count, BYTE exp_found, BYTE dec_found, BYTE nonzero_found, BYTE digit_count, BYTE exp_digit_count, BYTE digit_found
       13 bytes used
6257: FUNC ExecToken
6394: FUNC ExecThread
6420: FUNC StackAddItem
6431: FUNC DictEnd
6481: FUNC IncDictPtr
6493: FUNC IncExecPtr
6506: FUNC AllocMem
6535: FUNC WriteToken
       VARS: BYTE token, BYTE user_defined
       2 bytes used
6595: FUNC WriteHeader
6661: FUNC TokenArgThread
6699: FUNC HexFalse
6706: FUNC HexTrue
6725: include words.asm
10017: include word_stubs.asm
10321: FUNC main BEGIN
       VARS: WORD dest, BYTE arg, BYTE type
       4 bytes used

Call graph
==========
main(4) > setup(0) - (4 bytes)
main(4) > tests(0) - (4 bytes)
main(4) > tests(0) > DebugText(2) - (6 bytes)
main(4) > stats(0) - (4 bytes)
main(4) > stats(0) > DebugText(2) - (6 bytes)
main(4) > GfxSetup(0) - (4 bytes)
main(4) > InitForth(0) - (4 bytes)
main(4) > DrawStack(4) - (8 bytes)
main(4) > DrawStack(4) > LCD_clrscr(1) - (9 bytes)
main(4) > DrawStack(4) > LCD_char(7) - (15 bytes)
main(4) > DrawStack(4) > DrawHex(3) - (11 bytes)
main(4) > DrawStack(4) > DrawHex(3) > LCD_char(7) - (18 bytes)
main(4) > DrawStack(4) > DrawHex(3) > HexHigh(2) - (13 bytes)
main(4) > DrawStack(4) > DrawHex(3) > HexHigh(2) > LCD_char(7) - (20 bytes)
main(4) > DrawStack(4) > DrawHex(3) > HexLow(2) - (13 bytes)
main(4) > DrawStack(4) > DrawHex(3) > HexLow(2) > LCD_char(7) - (20 bytes)
main(4) > DrawStack(4) > LCD_print(4) - (12 bytes)
main(4) > DrawStack(4) > LCD_print(4) > LCD_char(7) - (19 bytes)
main(4) > DrawStack(4) > DrawFloat(7) - (15 bytes)
main(4) > DrawStack(4) > DrawFloat(7) > MemCopy(5) - (20 bytes)
main(4) > DrawStack(4) > DrawFloat(7) > LCD_char(7) - (22 bytes)
main(4) > DrawStack(4) > DrawFloat(7) > DigitHigh(1) - (16 bytes)
main(4) > DrawStack(4) > DrawFloat(7) > DigitHigh(1) > LCD_char(7) - (23 bytes)
main(4) > DrawStack(4) > DrawFloat(7) > DigitLow(1) - (16 bytes)
main(4) > DrawStack(4) > DrawFloat(7) > DigitLow(1) > LCD_char(7) - (23 bytes)
main(4) > DrawStack(4) > DrawString(4) - (12 bytes)
main(4) > DrawStack(4) > DrawString(4) > LCD_char(7) - (19 bytes)
main(4) > ReadLine(5) - (9 bytes)
main(4) > ReadLine(5) > LCD_print(4) - (13 bytes)
main(4) > ReadLine(5) > LCD_print(4) > LCD_char(7) - (20 bytes)
main(4) > ReadLine(5) > ReadKey(0) - (9 bytes)
main(4) > ReadLine(5) > LCD_char(7) - (16 bytes)
main(4) > LineWord(0) - (4 bytes)
main(4) > FindWord(0) - (4 bytes)
main(4) > WriteToken(2) - (6 bytes)
main(4) > WriteToken(2) > AllocMem(0) - (6 bytes)
main(4) > CheckData(13) - (17 bytes)
main(4) > CheckData(13) > BCD_Reverse(3) - (20 bytes)
main(4) > MemCopy(5) - (9 bytes)
main(4) > ErrorMsg(2) - (6 bytes)
main(4) > ErrorMsg(2) > LCD_print(4) - (10 bytes)
main(4) > ErrorMsg(2) > LCD_print(4) > LCD_char(7) - (17 bytes)
main(4) > ErrorMsg(2) > LCD_char(7) - (13 bytes)
main(4) > ErrorMsg(2) > ReadKey(0) - (6 bytes)

Functions outside of call graph
===============================
AddTest(6 bytes)
AuxPopShort(0 bytes)
AuxPushShort(0 bytes)
BCD_Add(0 bytes)
BCD_CORDIC(0 bytes)
BCD_Div(0 bytes)
BCD_Exp_diff(0 bytes)
BCD_Mult(0 bytes)
BCD_Pack(0 bytes)
BCD_RevExp(0 bytes)
BCD_RevSig(0 bytes)
BCD_Round(0 bytes)
BCD_StickyRound(0 bytes)
BCD_Unpack(0 bytes)
CORDIC_AsinAcos(0 bytes)
CORDIC_Atan(0 bytes)
CORDIC_Atrig1(0 bytes)
CORDIC_MarkSign(0 bytes)
CORDIC_Pack(0 bytes)
CORDIC_Push(0 bytes)
CORDIC_ShiftR0(0 bytes)
CORDIC_Trig(0 bytes)
CompareRans(0 bytes)
CopyNew(2 bytes)
CopyRegs(0 bytes)
DebugBuff(0 bytes)
DebugRans(0 bytes)
DictEnd(0 bytes)
DivTest(6 bytes)
ExecThread(0 bytes)
ExecToken(0 bytes)
FileInputTest(1 bytes)
HalfShift(0 bytes)
HalfShiftBackward(0 bytes)
HalfShiftForward(0 bytes)
HalfShiftWide(0 bytes)
HalfShiftWideForward(0 bytes)
HexFalse(0 bytes)
HexTrue(0 bytes)
IncDictPtr(0 bytes)
IncExecPtr(0 bytes)
IncRansExp(0 bytes)
InputTest(7 bytes)
MaxReg(0 bytes)
MultTest(6 bytes)
NewToR(2 bytes)
NormRans(0 bytes)
RansToBuff(0 bytes)
RansTos(0 bytes)
ShiftR0(0 bytes)
StackAddItem(0 bytes)
SwapR0R1(0 bytes)
TestFail(2 bytes)
TestsPassed(0 bytes)
TokenArgThread(0 bytes)
TosR0R1(0 bytes)
WriteHeader(0 bytes)
ZeroReg(0 bytes)
file_tests(0 bytes)
halt_no_test(0 bytes)
halt_test(2 bytes)
inc_line(0 bytes)
line_num(0 bytes)
read2(0 bytes)
read_file_line(0 bytes)

String literals from CALL
=========================
_string_literal00001: FCB "\\rTest ",0
_string_literal00002: FCB ": FAILED!\\n",0
_string_literal00003: FCB "   Expected: ",0
_string_literal00004: FCB "\\n   Found:    ",0
_string_literal00005: FCB "\\gTest ",0
_string_literal00006: FCB ": passed\\n",0
_string_literal00007: FCB "E",0
_string_literal00008: FCB "E",0
_string_literal00009: FCB "\\rTest ",0
_string_literal00010: FCB ": FAILED!\\n",0
_string_literal00011: FCB "   Expected: ",0
_string_literal00012: FCB "\\n   Found:    ",0
_string_literal00013: FCB "\\n\\n",0
_string_literal00014: FCB "\\gTest ",0
_string_literal00015: FCB ": passed - ",0
_string_literal00016: FCB "\\n",0
_string_literal00017: FCB "\\n\\gAll specific tests passed",0
_string_literal00018: FCB "\\l",0
_string_literal00019: FCB "\\n\\n\\rLine ",0
_string_literal00020: FCB ": FAILED!\\n",0
_string_literal00021: FCB "   Found:    ",0
_string_literal00022: FCB "\\n\\n\\lBeginning file-based tests\\n",0
_string_literal00023: FCB "\\n\\rUnrecognized input code: $",0
_string_literal00024: FCB "\\n\\l",0
_string_literal00025: FCB "\\n\\n\\gAll filed-based tests passed",0
_string_literal00026: FCB "\\n\\n\\rFile-based tests failed: ",0
_string_literal00027: FCB "\\n\\lTotal lines: ",0
_string_literal00028: FCB "\\n\\n\\rLine ",0
_string_literal00029: FCB ": FAILED!\\n",0
_string_literal00030: FCB "   Expected: ",0
_string_literal00031: FCB "\\n   Found:    ",0
_string_literal00032: FCB "E",0
_string_literal00033: FCB "\\n\\n\\lFree zp bytes: ",0
_string_literal00034: FCB "\\n\\lFree RIOT bytes: ",0
_string_literal00035: FCB "\\n",0
_string_literal00036: FCB " FREE]",0
_string_literal00037: FCB "               ",0
_string_literal00038: FCB "           [OK]",0
_string_literal00039: FCB "a                     ",0
_string_literal00040: FCB "                ",0


