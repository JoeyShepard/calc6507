TODO
====
remove debug and other directories
reimplement FUNC/END if keeping that
-keeping MOV.W?
-terrible with #0. at least check in macro :///
hi and lo macros in ASL
%include is NASM macro?
check extra if 3 stack spaces are being used
free up X permanently? saves only 3 or 6 cycles to keep X loaded

Decide:
-try to reuse FP regs for 8 and 16 bit? smaller interpreter?
-better to use 32 bytes recovered locals space for forth
-otherwise need calling convention for fp regs :/
-could have fp and int modes to reuse op codes

START HERE
-Leave optimizer in place
-Start work on Forth system
 - implement brk? how to halt then
 - leave emu as is and proceed with JMP/JSR
 - python script alerts to how much COULD be saving with BRK
-Recode drawing routines first
-register VM part of same system? seems not

Parts relying on optimizer
==========================
main.asm
-LOCALS_BEGIN
-globals declaration
-FUNC main, begin
 - calls:
   setup
   tests
   file_tests
   stats
   GfxSetup
   InitForth
   DrawStack
   ReadLine
   LineWord
   FindWord
   WriteTokenLCD
   CheckData
   MemCopy, #R_ans, dest, #OBJ_SIZE
   -See all calls to MemCopy. hard code?
   ErrorMsg

debug.asm
-DebugText
-halt_test

emu6507.asm
-LCD_clrscr
-LCD_char
-LCD_print

error.asm
-ErrorMsg

file_tests.asm
-line_num
-FileInputTest

forth.asm
-ReadLine
-CheckData
-WriteToken

globals
-ok if still using WORD and BYTE macros. change to global only?

math.asm
-BCD_Reverse

nasm.asm
-several macros like upper and include used elsewhere

optimizer.asm/optimizer_nmos.asm
-replace everything

output.asm
-DigitHigh
-DigitLow
-DrawFloat
-HexHigh
-HexLow
-DrawHex
-DrawString
-DrawStack

stats.asm
-calls optimized functions

system.asm
-FUNC MemCopy

tests.asm
-InputTest
-hmm, many others too

words.asm
-calls to LineWord and FindWord ok?